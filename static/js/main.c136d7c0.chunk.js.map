{"version":3,"sources":["components/Row/Row.module.css","components/TextArea/TextArea.module.css","components/InputPanel/InputPanel.module.css","components/Line/Line.module.css","components/OutputPanel/OutputPanel.module.css","components/Cell/Cell.module.css","components/TextArea/TextArea.tsx","components/InputPanel/InputPanel.tsx","services/parser.ts","components/Space/Space.tsx","components/Line/Line.tsx","components/OutputPanel/OutputPanel.tsx","components/Row/Row.tsx","components/Cell/Cell.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","require","TextArea","state","value","editor","onEditorMounted","setSize","focus","onChange","data","setState","props","onSelection","getDoc","getSelection","onBeforeChange","this","editorDidMount","className","styles","codeMirror","options","readOnly","mode","theme","lineNumbers","React","InputPanel","leftPanel","onTextChange","chars","charCodeAt","alphaNumeric","i","push","findBodyEnd","text","start","allowSpace","length","char","c","indexOf","concat","parser","Parser","tokens","token","started","end","nextChar","highlight","Space","children","OffsetLine","comma","Line","findTokens","index","result","key","toLine","entry","entries","ReplacementPopup","selection","OutputPanel","bodyLines","prefixes","split","prefix","outputPanel","JSON","stringify","map","Row","row","content","Cell","cell","App","onPrefixChange","event","target","placeholder","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c136d7c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Row_row__1I1t4\",\"content\":\"Row_content__2QrO4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeMirror\":\"TextArea_codeMirror__1a2Ur\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftPanel\":\"InputPanel_leftPanel__Xhndi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"token\":\"Line_token__2Oqy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputPanel\":\"OutputPanel_outputPanel__2mkNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3fRSG\"};","import * as React from 'react';\r\n\r\nimport './style.css';\r\nimport styles from './TextArea.module.css';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport { default as CM } from 'react-codemirror2';\r\nimport { Controlled as CodeMirror, EditorChangeEvent } from 'react-codemirror2';\r\nimport { Editor } from 'codemirror';\r\n\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/javascript/javascript');\r\n\r\ntype Props = {\r\n    cssClass?: string\r\n    text?: string;\r\n    onChange: (value: string) => void;\r\n    onSelection: (value: string) => void;\r\n}\r\n\r\ntype State = {\r\n    value: string;\r\n}\r\n\r\ntype Point = {\r\n    ch: number,\r\n    line: number,\r\n    sticky?: number\r\n\r\n}\r\n\r\ntype Data = {\r\n    origin: \"*mouse\" | \"+move\"  | \"-move\" | void,\r\n    ranges: { anchor: Point, head: Point }[],\r\n}\r\n\r\nexport class TextArea extends React.PureComponent<Props, State> {\r\n    state: State = { value: '' }\r\n    editor?: Editor;\r\n    \r\n    onEditorMounted = (editor: Editor)  => {\r\n        editor.setSize('', '100%');\r\n        editor.focus();\r\n    }\r\n\r\n    render() {\r\n        return <CodeMirror\r\n            onBeforeChange={this.onChange}\r\n            editorDidMount={this.onEditorMounted}\r\n            onSelection={this.onSelection}\r\n            className={styles.codeMirror}\r\n            options={{\r\n                readOnly: false,\r\n                mode: \"javascript\",\r\n                theme: \"dracula\",\r\n                lineNumbers: true,\r\n            }}\r\n            value={this.state.value} />\r\n    }\r\n\r\n    private onChange = (editor: Editor, data: any, value: any) => {\r\n        this.setState({ value }, () => {\r\n            this.props.onChange(value)\r\n        });\r\n    }\r\n\r\n    private onSelection = (editor: Editor, data: Data) => {\r\n        this.props.onSelection(editor.getDoc().getSelection());\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport { TextArea } from '../TextArea';\r\n\r\nimport styles from './InputPanel.module.css';\r\n\r\ntype Props = {\r\n    onTextChange: (text: string) => void\r\n    onSelection: (text: string) => void;\r\n}\r\n\r\nexport function InputPanel(props: Props) {\r\n    return <div className={styles.leftPanel}>\r\n        <TextArea onChange={(value) => props.onTextChange(value)} \r\n        onSelection={props.onSelection}/>\r\n    </div>\r\n}","export type Token = {\r\n    start: number,\r\n    end: number,\r\n    token: string,\r\n    highlight?: boolean,\r\n}\r\n\r\nconst START = '$';\r\nconst BODY_START = '{'\r\nconst BODY_END = '}';\r\nconst PLACE_HOLDER_START = ':';\r\nconst CHOICE_SEPARATOR = ','\r\nconst CHOICE_FLAG = '|'\r\n\r\nlet chars: number[] = [\r\n    PLACE_HOLDER_START.charCodeAt(0),\r\n    CHOICE_FLAG.charCodeAt(0),\r\n    CHOICE_SEPARATOR.charCodeAt(0),\r\n];\r\n\r\nconst alphaNumeric = []\r\nfor (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i)\r\n}\r\n\r\nfor (let i = 'a'.charCodeAt(0); i <= 'z'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i)\r\n}\r\n\r\nfor (let i = '0'.charCodeAt(0); i <= '9'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i);\r\n}\r\n\r\nchars = chars.concat(alphaNumeric);\r\n\r\n// Scan ahead to find if ${ has an end or is part of the ongoing token\r\n/**\r\n * \r\n * @param text The line to search\r\n * @param start The position to start from\r\n */\r\nfunction findBodyEnd(text: string, start: number, allowSpace?: boolean) {\r\n\r\n    for (let i = start; i < text.length; i++) {\r\n        const char = text[i];\r\n\r\n        switch (char) {\r\n            case BODY_END:\r\n                if (i === start) {\r\n                    return -1;\r\n                }\r\n                return i;\r\n            default: {\r\n                const c = char.charCodeAt(0);\r\n                if (chars.indexOf(c) == -1) {\r\n                    if (char == ' ' && allowSpace) {\r\n                        continue;\r\n                    }\r\n                    return -1;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    return -1;\r\n\r\n}\r\n\r\nexport interface Scannable {\r\n    findTokens(text: string): Token[]\r\n}\r\n\r\nclass Parser implements Scannable {\r\n    public findTokens(text: string): Token[] {\r\n        const tokens: Token[] = [];\r\n        let token: string = '';\r\n\r\n        let started = false;\r\n        let start: number = -1;\r\n        let end: number = -1;\r\n\r\n        for (let i: number = 0; i < text.length; i++) {\r\n            const char = text[i];\r\n            const nextChar = text[i + 1];\r\n\r\n            switch (char) {\r\n                case START: {\r\n                    if (nextChar == BODY_START) {\r\n                        end = findBodyEnd(text, i + 2);\r\n                        if (end != -1) {\r\n                            if (start != -1) {\r\n                                tokens.push({ start: start, end: i - 1, token });\r\n                                token = '';\r\n                            }\r\n                            started = true;\r\n                            start = i;\r\n                        }\r\n                    }\r\n                    token += char;\r\n                    break;\r\n                }\r\n                case BODY_END:\r\n                    token += char;\r\n\r\n                    if (started || i == text.length - 1) {\r\n                        end = i;\r\n                        if (start == -1) {\r\n                            start = i;\r\n                        }\r\n                    }\r\n\r\n                    if (started) {\r\n                        tokens.push({ start, end, token, highlight: true });\r\n                        start = -1;\r\n                        end = -1;\r\n                        token = ''\r\n                        started = false;\r\n                    }\r\n\r\n                    break;\r\n                default: {\r\n                    if (start == -1) {\r\n                        start = i;\r\n                    }\r\n\r\n                    token += char;\r\n                }\r\n            }\r\n\r\n            if (i == text.length - 1 && token) {\r\n                tokens.push({\r\n                    start,\r\n                    end: i,\r\n                    token\r\n                })\r\n            }\r\n        }\r\n\r\n        return tokens\r\n\r\n    }\r\n}\r\n\r\nlet parser: Parser;\r\n\r\nexport function getParser(): Scannable {\r\n    if (!parser)  {\r\n        parser = new Parser();\r\n    }\r\n    \r\n    return parser;\r\n}","import * as React from 'react';\r\n\r\nexport function Space(props: any) {\r\n    return <>{'    '}{props.children}</>\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Line.module.css';\r\nimport { getParser, Scannable } from '../../services/parser';\r\nimport { Space } from '../Space';\r\n \r\ntype Props = Readonly<{\r\n    children: string\r\n    length: number,\r\n    index: number\r\n}>;\r\n\r\n\r\ntype OffsetLineProps = {\r\n    comma: boolean,\r\n    children: string | JSX.Element | JSX.Element[]\r\n}\r\nfunction OffsetLine(props: OffsetLineProps) {\r\n    const comma: string = (props.comma) ? ',' : '';\r\n    return <div>\r\n        <Space>\r\n            <Space>\r\n                {props.children}\"{comma}\r\n            </Space>\r\n        </Space>\r\n    </div>\r\n}\r\n\r\nexport function Line(props: Props) {\r\n    const parser: Scannable = getParser();\r\n    \r\n    const tokens = parser.findTokens(props.children);\r\n\r\n    if (tokens.length === 0) {\r\n        return <OffsetLine comma={props.index + 1 !== props.length}><span>{props.children}</span></OffsetLine>\r\n    }\r\n\r\n    const result: JSX.Element[] = [];\r\n\r\n    for (let i = 0; i < tokens.length; i++) {            \r\n        const token = tokens[i];\r\n\r\n        if (token.highlight) {\r\n            result.push(<span key={i} className={styles.token}>{token.token}</span>);\r\n        } else {\r\n            result.push(<span key={i}>{token.token}</span>)\r\n        }     \r\n    }\r\n\r\n    return (\r\n        <OffsetLine comma={props.index + 1 !== props.length}>\r\n            {result}\r\n        </OffsetLine>\r\n    );\r\n}","import * as React from 'react';\r\n\r\nimport { Line } from '../Line';\r\nimport { Space } from '../Space';\r\n\r\nimport styles from './OutputPanel.module.css';\r\nimport { throws } from 'assert';\r\n\r\ntype Props = {\r\n    text: string\r\n    prefix?: string;\r\n    selection?: string;\r\n}\r\n\r\nfunction toLine(entry: string, index: number, entries: string[]) {\r\n    return (\r\n        <Line key={index} index={index} length={entries.length}>{entry}</Line>\r\n    );\r\n}\r\n\r\nfunction ReplacementPopup(props: any) {\r\n    if (!props.selection) {\r\n        return null;  \r\n    }\r\n\r\n    return <div>\r\n        <div>{props.selection}\r\n        </div>\r\n        <button>Tabstop</button>\r\n    </div>\r\n}\r\n\r\nexport function OutputPanel(props: Props) {\r\n    let bodyLines: string[] = [];\r\n    let prefixes: string[] = [];\r\n\r\n    if (props.text) {\r\n        bodyLines = props.text.split('\\n');\r\n    }\r\n\r\n    if (props.prefix) {\r\n        prefixes = props.prefix.split(',');\r\n    }\r\n\r\n\r\n\r\n    return (<>\r\n        <div className={styles.outputPanel}>\r\n            <ReplacementPopup selection={props.selection} />\r\n            <pre>\r\n                <code>\r\n                    <br />\r\n                    <Space>\r\n                        \"prefix\":\r\n                    </Space>\r\n                    {` \"${JSON.stringify(prefixes) || ''}\"` + ','}\r\n                    <br />\r\n                    <Space>\r\n                        \"body\": [\r\n                    </Space>\r\n                    {bodyLines.map(toLine)}\r\n                    <Space>\r\n                        ],\r\n                    </Space>\r\n                    <br />\r\n                    <Space>\r\n                        \"description\": \"\"\r\n                    </Space>\r\n                    <br />\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </>);\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Row.module.css';\r\n\r\ntype Props = {\r\n    children: React.ReactElement | React.ReactElement[];\r\n    className?: string;\r\n}\r\n\r\nexport function Row(props: Props) {\r\n    return (\r\n        <div className={'row ' + props.className + ' ' + styles.row + ' ' + styles.content}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Cell.module.css';\r\n\r\ntype Props = Readonly<{\r\n    children: JSX.Element\r\n}>;\r\n\r\nexport function Cell(props: Props) {\r\n    return <div className={'cell ' + styles.cell}>{props.children}</div>\r\n}","import React from 'react';\nimport './App.css';\nimport { InputPanel } from './components/InputPanel';\nimport { OutputPanel } from './components/OutputPanel';\nimport { Row } from './components/Row';\nimport { Cell } from './components/Cell';\n\n\ntype State = {\n  text: string;\n  prefix: string;\n  selection: string;\n}\n\nclass App extends React.PureComponent<{}, State> {\n\n  state = { text: '', prefix: '', selection: '' };\n\n  onTextChange = (text: string) => {\n    this.setState({\n      text\n    });\n  }\n\n  onPrefixChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      prefix: event.target.value\n    });\n  }\n\n  onSelection  = (selection: string) => {\n    this.setState({\n      selection\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row className=\"prefixRow\">\n          <Cell>\n            <input placeholder=\"Use comma to add multiple prefixes\" onChange={this.onPrefixChange} />\n          </Cell>\n        </Row>\n        <Row className=\"bodyRow\">\n          <Cell>\n            <InputPanel onSelection={this.onSelection} onTextChange={this.onTextChange} />\n          </Cell>\n          <Cell>\n            <OutputPanel selection={this.state.selection} prefix={this.state.prefix} text={this.state.text} />\n          </Cell>\n        </Row>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}