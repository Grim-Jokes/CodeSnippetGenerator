{"version":3,"sources":["components/ConfigPanel/ConfigPanel.module.css","components/TextArea/TextArea.module.css","components/InputPanel/InputPanel.module.css","components/Line/Line.module.css","components/OutputPanel/OutputPanel.module.css","components/TextArea/TextArea.tsx","components/InputPanel/InputPanel.tsx","services/parser.ts","components/Space/Space.tsx","components/Line/Line.tsx","components/OutputPanel/OutputPanel.tsx","components/Row/Row.tsx","components/Cell/Cell.tsx","types/index.ts","components/ConfigPanel/ConfigPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","require","TextArea","state","value","editor","onEditorMounted","setSize","onChange","data","setState","props","onSelection","console","log","getDoc","getSelection","onBeforeChange","this","editorDidMount","className","styles","codeMirror","onDblClick","options","autofocus","readOnly","theme","lineNumbers","text","React","InputPanel","leftPanel","onTextChange","chars","charCodeAt","alphaNumeric","i","push","findBodyEnd","start","allowSpace","length","char","c","indexOf","concat","parser","Parser","tokens","token","started","end","nextChar","highlight","Space","children","OffsetLine","comma","Line","findTokens","index","result","key","toLine","entry","entries","OutputPanel","bodyLines","prefixes","split","prefix","outputPanel","JSON","stringify","map","Row","row","content","Cell","cell","TabStopOption","createTabStopOnClick","option","onClick","ConfigPanel","selection","configPanel","buttonContainer","Placeholder","button","Tabstop","App","transformedText","onPrefixChange","event","target","onConfigClick","re","RegExp","replace","placeholder","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d9c5dd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"configPanel\":\"ConfigPanel_configPanel__2RWLn\",\"selection\":\"ConfigPanel_selection__FlFmM\",\"close\":\"ConfigPanel_close__1QdKa\",\"buttonContainer\":\"ConfigPanel_buttonContainer__308ww\",\"button\":\"ConfigPanel_button__3inoL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeMirror\":\"TextArea_codeMirror__1a2Ur\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftPanel\":\"InputPanel_leftPanel__Xhndi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"token\":\"Line_token__2Oqy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputPanel\":\"OutputPanel_outputPanel__2mkNF\"};","import * as React from 'react';\r\n\r\nimport './style.css';\r\nimport styles from './TextArea.module.css';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport { Controlled as CodeMirror, EditorChangeEvent } from 'react-codemirror2';\r\nimport { Editor } from 'codemirror';\r\n\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/javascript/javascript');\r\n\r\ntype Props = {\r\n    cssClass?: string\r\n    text?: string;\r\n    onChange: (value: string) => void;\r\n    onSelection: (value: string) => void;\r\n}\r\n\r\ntype State = {\r\n    value: string;\r\n}\r\n\r\ntype Point = {\r\n    ch: number,\r\n    line: number,\r\n    sticky?: number\r\n}\r\n\r\ntype Data = {\r\n    origin: \"*mouse\" | \"+move\" | \"-move\" | void,\r\n    ranges: { anchor: Point, head: Point }[],\r\n}\r\n\r\nexport class TextArea extends React.PureComponent<Props, State> {\r\n    state: State = { value: '' }\r\n    editor?: Editor;\r\n\r\n    onEditorMounted = (editor: Editor) => {\r\n        editor.setSize('', '100%');\r\n    }\r\n\r\n    render() {\r\n        return <CodeMirror\r\n            onBeforeChange={this.onChange}\r\n            editorDidMount={this.onEditorMounted}\r\n            className={styles.codeMirror}\r\n            onDblClick={this.onSelection}\r\n            options={{\r\n                autofocus: true,\r\n                readOnly: false,\r\n                theme: \"dracula\",\r\n                lineNumbers: true,\r\n            }}\r\n            value={this.props.text || ''} />\r\n    }\r\n\r\n    private onChange = (editor: Editor, data: any, value: any) => {\r\n        this.setState({ value }, () => {\r\n            this.props.onChange(value)\r\n        });\r\n    }\r\n\r\n    private onSelection = (editor: Editor, data: Data) => {\r\n        console.log(data);\r\n        console.log(editor.getDoc().getSelection());\r\n\r\n\r\n        this.props.onSelection(editor.getDoc().getSelection());\r\n\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport { TextArea } from '../TextArea';\r\n\r\nimport styles from './InputPanel.module.css';\r\n\r\ntype Props = {\r\n    onTextChange: (text: string) => void;\r\n    onSelection: (text: string) => void;\r\n    value: string;\r\n}\r\n\r\nexport function InputPanel(props: Props) {\r\n    return <div className={styles.leftPanel}>\r\n        <TextArea text={props.value} onChange={(value) => props.onTextChange(value)} \r\n        onSelection={props.onSelection}/>\r\n    </div>\r\n}","export type Token = {\r\n    start: number,\r\n    end: number,\r\n    token: string,\r\n    highlight?: boolean,\r\n}\r\n\r\nconst START = '$';\r\nconst BODY_START = '{'\r\nconst BODY_END = '}';\r\nconst PLACE_HOLDER_START = ':';\r\nconst CHOICE_SEPARATOR = ','\r\nconst CHOICE_FLAG = '|'\r\n\r\nlet chars: number[] = [\r\n    PLACE_HOLDER_START.charCodeAt(0),\r\n    CHOICE_FLAG.charCodeAt(0),\r\n    CHOICE_SEPARATOR.charCodeAt(0),\r\n];\r\n\r\nconst alphaNumeric = []\r\nfor (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i)\r\n}\r\n\r\nfor (let i = 'a'.charCodeAt(0); i <= 'z'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i)\r\n}\r\n\r\nfor (let i = '0'.charCodeAt(0); i <= '9'.charCodeAt(0); i++) {\r\n    alphaNumeric.push(i);\r\n}\r\n\r\nchars = chars.concat(alphaNumeric);\r\n\r\n// Scan ahead to find if ${ has an end or is part of the ongoing token\r\n/**\r\n * \r\n * @param text The line to search\r\n * @param start The position to start from\r\n */\r\nfunction findBodyEnd(text: string, start: number, allowSpace?: boolean) {\r\n\r\n    for (let i = start; i < text.length; i++) {\r\n        const char = text[i];\r\n\r\n        switch (char) {\r\n            case BODY_END:\r\n                if (i === start) {\r\n                    return -1;\r\n                }\r\n                return i;\r\n            default: {\r\n                const c = char.charCodeAt(0);\r\n                if (chars.indexOf(c) == -1) {\r\n                    if (char == ' ' && allowSpace) {\r\n                        continue;\r\n                    }\r\n                    return -1;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    return -1;\r\n\r\n}\r\n\r\nexport interface Scannable {\r\n    findTokens(text: string): Token[]\r\n}\r\n\r\nclass Parser implements Scannable {\r\n    public findTokens(text: string): Token[] {\r\n        const tokens: Token[] = [];\r\n        let token: string = '';\r\n\r\n        let started = false;\r\n        let start: number = -1;\r\n        let end: number = -1;\r\n\r\n        for (let i: number = 0; i < text.length; i++) {\r\n            const char = text[i];\r\n            const nextChar = text[i + 1];\r\n\r\n            switch (char) {\r\n                case START: {\r\n                    if (nextChar == BODY_START) {\r\n                        end = findBodyEnd(text, i + 2);\r\n                        if (end != -1) {\r\n                            if (start != -1) {\r\n                                tokens.push({ start: start, end: i - 1, token });\r\n                                token = '';\r\n                            }\r\n                            started = true;\r\n                            start = i;\r\n                        }\r\n                    }\r\n                    token += char;\r\n                    break;\r\n                }\r\n                case BODY_END:\r\n                    token += char;\r\n\r\n                    if (started || i == text.length - 1) {\r\n                        end = i;\r\n                        if (start == -1) {\r\n                            start = i;\r\n                        }\r\n                    }\r\n\r\n                    if (started) {\r\n                        tokens.push({ start, end, token, highlight: true });\r\n                        start = -1;\r\n                        end = -1;\r\n                        token = ''\r\n                        started = false;\r\n                    }\r\n\r\n                    break;\r\n                default: {\r\n                    if (start == -1) {\r\n                        start = i;\r\n                    }\r\n\r\n                    token += char;\r\n                }\r\n            }\r\n\r\n            if (i == text.length - 1 && token) {\r\n                tokens.push({\r\n                    start,\r\n                    end: i,\r\n                    token\r\n                })\r\n            }\r\n        }\r\n\r\n        return tokens\r\n\r\n    }\r\n}\r\n\r\nlet parser: Parser;\r\n\r\nexport function getParser(): Scannable {\r\n    if (!parser)  {\r\n        parser = new Parser();\r\n    }\r\n    \r\n    return parser;\r\n}","import * as React from 'react';\r\n\r\nexport function Space(props: any) {\r\n    return <>{'    '}{props.children}</>\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Line.module.css';\r\nimport { getParser, Scannable } from '../../services/parser';\r\nimport { Space } from '../Space';\r\n \r\ntype Props = Readonly<{\r\n    children: string\r\n    length: number,\r\n    index: number\r\n}>;\r\n\r\n\r\ntype OffsetLineProps = {\r\n    comma: boolean,\r\n    children: string | JSX.Element | JSX.Element[]\r\n}\r\nfunction OffsetLine(props: OffsetLineProps) {\r\n    const comma: string = (props.comma) ? ',' : '';\r\n    return <div>\r\n        <Space>\r\n            <Space>\r\n                \"{props.children}\"{comma}\r\n            </Space>\r\n        </Space>\r\n    </div>\r\n}\r\n\r\nexport function Line(props: Props) {\r\n    const parser: Scannable = getParser();\r\n    \r\n    const tokens = parser.findTokens(props.children);\r\n\r\n    if (tokens.length === 0) {\r\n        return <OffsetLine comma={props.index + 1 !== props.length}><span>{props.children}</span></OffsetLine>\r\n    }\r\n\r\n    const result: JSX.Element[] = [];\r\n\r\n    for (let i = 0; i < tokens.length; i++) {            \r\n        const token = tokens[i];\r\n\r\n        if (token.highlight) {\r\n            result.push(<span key={i} className={styles.token}>{token.token}</span>);\r\n        } else {\r\n            result.push(<span key={i}>{token.token}</span>)\r\n        }     \r\n    }\r\n\r\n    return (\r\n        <OffsetLine comma={props.index + 1 !== props.length}>\r\n            {result}\r\n        </OffsetLine>\r\n    );\r\n}","import * as React from 'react';\r\n\r\nimport { Line } from '../Line';\r\nimport { Space } from '../Space';\r\n\r\nimport styles from './OutputPanel.module.css';\r\n\r\ntype Props = {\r\n    text: string\r\n    prefix?: string;\r\n    selection?: string;\r\n}\r\n\r\nfunction toLine(entry: string, index: number, entries: string[]) {\r\n    return (\r\n        <Line key={index} index={index} length={entries.length}>{entry}</Line>\r\n    );\r\n}\r\n\r\n\r\nexport function OutputPanel(props: Props) {\r\n    let bodyLines: string[] = [];\r\n    let prefixes: string[] = [];\r\n\r\n    if (props.text) {\r\n        bodyLines = props.text.split('\\n');\r\n    }\r\n\r\n    if (props.prefix) {\r\n        prefixes = props.prefix.split(',');\r\n    }\r\n\r\n    return (<>\r\n        <div className={styles.outputPanel}>\r\n            <pre>\r\n                <code>\r\n                    <br />\r\n                    <Space>\r\n                        \"prefix\":\r\n                    </Space>\r\n                    {` \"${JSON.stringify(prefixes) || ''}\"` + ','}\r\n                    <br />\r\n                    <Space>\r\n                        \"body\": [\r\n                    </Space>\r\n                    {bodyLines.map(toLine)}\r\n                    <Space>\r\n                        ],\r\n                    </Space>\r\n                    <br />\r\n                    <Space>\r\n                        \"description\": \"\"\r\n                    </Space>\r\n                    <br />\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    </>);\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Row.module.css';\r\n\r\ntype Props = {\r\n    children: React.ReactElement | React.ReactElement[];\r\n    className?: string;\r\n}\r\n\r\nexport function Row(props: Props) {\r\n    return (\r\n        <div className={'row ' + props.className + ' ' + styles.row + ' ' + styles.content}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\n\r\nimport styles from './Cell.module.css';\r\n\r\ntype Props = Readonly<{\r\n    children: JSX.Element | JSX.Element[];\r\n    className?: string;\r\n}>;\r\n\r\nexport function Cell(props: Props) {\r\n    return <div className={'cell ' + styles.cell + ' ' + props.className}>{props.children}</div>\r\n}","export enum TabStopOption {\r\n    /*\r\n    * ${1:Placeholder value}\r\n    * subsequent ${1} tabstops will also show this value\r\n    */\r\n    Placeholder,\r\n    /**\r\n     * ${2}, etc.\r\n     */\r\n    Tabstop\r\n}","import * as React from 'react';\r\n\r\nimport styles from './ConfigPanel.module.css';\r\nimport { Row } from '../Row';\r\nimport { Cell } from '../Cell';\r\nimport { TabStopOption } from '../../types';\r\n\r\ntype Props = {\r\n    selection?: string\r\n    onClick: (option: TabStopOption) => void;\r\n}\r\n\r\nfunction createTabStopOnClick(option: TabStopOption, props: Props) {\r\n    return () => {\r\n        props.onClick(option);\r\n    }\r\n}\r\n\r\n\r\nexport function ConfigPanel(props: Props) {\r\n    if (!props.selection) {\r\n        return <Row className={styles.configPanel}>\r\n            <Cell>\r\n                <div>\r\n                    Select some text to choose what to replace it with\r\n                </div>\r\n            </Cell>\r\n        </Row>;\r\n    }\r\n    return <>\r\n        <Row className={styles.configPanel}>\r\n            <Cell>\r\n                <div><span>Replace </span><span className={styles.selection}>{props.selection} </span>with:</div>\r\n            </Cell>\r\n        </Row>\r\n        <Row>\r\n            <Cell>\r\n                <div className={styles.buttonContainer}>\r\n                    <div onClick={createTabStopOnClick(TabStopOption.Placeholder, props)} className={styles.button}>Placeholders</div>\r\n                    <div onClick={createTabStopOnClick(TabStopOption.Tabstop, props)} className={styles.button}>Tabtop</div>\r\n                    <div className={styles.button}>Choice</div>\r\n                    <div className={styles.button}>Variables</div>\r\n                </div>\r\n            </Cell>\r\n        </Row>\r\n    </>\r\n}","import React from 'react';\nimport './App.css';\nimport { InputPanel } from './components/InputPanel';\nimport { OutputPanel } from './components/OutputPanel';\nimport { Row } from './components/Row';\nimport { Cell } from './components/Cell';\nimport { ConfigPanel } from './components/ConfigPanel';\nimport { TabStopOption } from './types';\n\n\ntype State = {\n  text: string;\n  prefix: string;\n  selection: string;\n  transformedText: string;\n}\n\nclass App extends React.PureComponent<{}, State> {\n\n  state = { text: 'class DoubleClickMe {\\n  ${0}\\n}\\nexport { DoubleClickMe };', prefix: '', selection: '', transformedText: '' };\n\n  onTextChange = (text: string) => {\n    this.setState({\n      text\n    });\n  }\n\n  onPrefixChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      prefix: event.target.value\n    });\n  }\n\n  onSelection = (selection: string) => {\n    this.setState({\n      selection\n    })\n  }\n\n  onConfigClick = (option: TabStopOption) => {\n    if (option === TabStopOption.Tabstop) {\n      const re = new RegExp(this.state.selection, 'g');\n      this.setState({\n        text: this.state.text.replace(re, '${1}')\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row className=\"prefixRow\">\n          <Cell>\n            <input placeholder=\"Use comma to add multiple prefixes\" onChange={this.onPrefixChange} />\n          </Cell>\n        </Row>\n        <Row className=\"contentRow\">\n          <Cell className={`config-cell`}>\n            <ConfigPanel onClick={this.onConfigClick} selection={this.state.selection} />\n          </Cell>\n          <Cell>\n            <InputPanel value={this.state.text} onSelection={this.onSelection} onTextChange={this.onTextChange} />\n          </Cell>\n          <Cell>\n            <OutputPanel selection={this.state.selection} prefix={this.state.prefix} text={this.state.transformedText || this.state.text} />\n          </Cell>\n        </Row>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}